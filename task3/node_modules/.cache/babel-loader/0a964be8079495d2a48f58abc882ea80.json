{"ast":null,"code":"import dates from '../utils/dates';\nimport { set } from '../formats';\nimport { set as setLocalizer } from '../localizer';\n\nvar dateRangeFormat = function dateRangeFormat(_ref, culture, local) {\n  var start = _ref.start,\n      end = _ref.end;\n  return local.format(start, 'd', culture) + ' — ' + local.format(end, 'd', culture);\n};\n\nvar timeRangeFormat = function timeRangeFormat(_ref2, culture, local) {\n  var start = _ref2.start,\n      end = _ref2.end;\n  return local.format(start, 't', culture) + ' — ' + local.format(end, 't', culture);\n};\n\nvar timeRangeStartFormat = function timeRangeStartFormat(_ref3, culture, local) {\n  var start = _ref3.start,\n      end = _ref3.end;\n  return local.format(start, 't', culture) + ' — ';\n};\n\nvar timeRangeEndFormat = function timeRangeEndFormat(_ref4, culture, local) {\n  var start = _ref4.start,\n      end = _ref4.end;\n  return ' — ' + local.format(end, 't', culture);\n};\n\nvar weekRangeFormat = function weekRangeFormat(_ref5, culture, local) {\n  var start = _ref5.start,\n      end = _ref5.end;\n  return local.format(start, 'MMM dd', culture) + ' - ' + local.format(end, dates.eq(start, end, 'month') ? 'dd' : 'MMM dd', culture);\n};\n\nexport var formats = {\n  dateFormat: 'dd',\n  dayFormat: 'ddd dd/MM',\n  weekdayFormat: 'ddd',\n  selectRangeFormat: timeRangeFormat,\n  eventTimeRangeFormat: timeRangeFormat,\n  eventTimeRangeStartFormat: timeRangeStartFormat,\n  eventTimeRangeEndFormat: timeRangeEndFormat,\n  timeGutterFormat: 't',\n  monthHeaderFormat: 'Y',\n  dayHeaderFormat: 'dddd MMM dd',\n  dayRangeHeaderFormat: weekRangeFormat,\n  agendaHeaderFormat: dateRangeFormat,\n  agendaDateFormat: 'ddd MMM dd',\n  agendaTimeFormat: 't',\n  agendaTimeRangeFormat: timeRangeFormat\n};\nexport default function (globalize) {\n  function getCulture(culture) {\n    return culture ? globalize.findClosestCulture(culture) : globalize.culture();\n  }\n\n  function firstOfWeek(culture) {\n    culture = getCulture(culture);\n    return culture && culture.calendar.firstDay || 0;\n  }\n\n  set(formats);\n  return setLocalizer({\n    firstOfWeek: firstOfWeek,\n    parse: function parse(value, format, culture) {\n      return globalize.parseDate(value, format, culture);\n    },\n    format: function format(value, _format, culture) {\n      return globalize.format(value, _format, culture);\n    }\n  });\n}","map":{"version":3,"sources":["/Users/yukoenqvist/personaltrainer/src/localizers/oldGlobalize.js"],"names":["dates","set","setLocalizer","dateRangeFormat","culture","local","start","end","format","timeRangeFormat","timeRangeStartFormat","timeRangeEndFormat","weekRangeFormat","eq","formats","dateFormat","dayFormat","weekdayFormat","selectRangeFormat","eventTimeRangeFormat","eventTimeRangeStartFormat","eventTimeRangeEndFormat","timeGutterFormat","monthHeaderFormat","dayHeaderFormat","dayRangeHeaderFormat","agendaHeaderFormat","agendaDateFormat","agendaTimeFormat","agendaTimeRangeFormat","globalize","getCulture","findClosestCulture","firstOfWeek","calendar","firstDay","parse","value","parseDate"],"mappings":"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","sourcesContent":["import dates from '../utils/dates';\nimport { set } from '../formats';\nimport { set as setLocalizer } from '../localizer';\n\nlet dateRangeFormat = ({ start, end }, culture, local)=>\n  local.format(start, 'd', culture) + ' — ' + local.format(end, 'd', culture)\n\nlet timeRangeFormat = ({ start, end }, culture, local)=>\n  local.format(start, 't', culture) +\n    ' — ' + local.format(end, 't', culture)\n\nlet timeRangeStartFormat = ({ start, end }, culture, local)=>\n  local.format(start, 't', culture) + ' — '\n\nlet timeRangeEndFormat = ({ start, end }, culture, local)=>\n  ' — ' + local.format(end, 't', culture)\n\nlet weekRangeFormat = ({ start, end }, culture, local)=>\n  local.format(start, 'MMM dd', culture) +\n    ' - ' + local.format(end, dates.eq(start, end, 'month') ? 'dd' : 'MMM dd', culture)\n\nexport let formats = {\n  dateFormat: 'dd',\n  dayFormat: 'ddd dd/MM',\n  weekdayFormat: 'ddd',\n\n  selectRangeFormat: timeRangeFormat,\n  eventTimeRangeFormat: timeRangeFormat,\n  eventTimeRangeStartFormat: timeRangeStartFormat,\n  eventTimeRangeEndFormat: timeRangeEndFormat,\n\n  timeGutterFormat: 't',\n\n  monthHeaderFormat: 'Y',\n  dayHeaderFormat: 'dddd MMM dd',\n  dayRangeHeaderFormat: weekRangeFormat,\n  agendaHeaderFormat: dateRangeFormat,\n\n  agendaDateFormat: 'ddd MMM dd',\n  agendaTimeFormat: 't',\n  agendaTimeRangeFormat: timeRangeFormat\n}\n\nexport default function(globalize) {\n\n  function getCulture(culture){\n    return culture\n      ? globalize.findClosestCulture(culture)\n      : globalize.culture()\n  }\n\n  function firstOfWeek(culture) {\n    culture = getCulture(culture)\n    return (culture && culture.calendar.firstDay) || 0\n  }\n\n  set(formats)\n\n  return setLocalizer({\n    firstOfWeek,\n\n    parse(value, format, culture){\n      return globalize.parseDate(value, format, culture)\n    },\n\n    format(value, format, culture){\n      return globalize.format(value, format, culture)\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}