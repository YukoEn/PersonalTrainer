{"ast":null,"code":"import _objectWithoutProperties from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/yukoenqvist/personaltrainer/src/Month.js\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport cn from 'classnames';\nimport dates from './utils/dates';\nimport localizer from './localizer';\nimport chunk from 'lodash/chunk';\nimport { navigate, views } from './utils/constants';\nimport { notify } from './utils/helpers';\nimport getPosition from 'dom-helpers/query/position';\nimport raf from 'dom-helpers/util/requestAnimationFrame';\nimport Popup from './Popup';\nimport Overlay from 'react-overlays/lib/Overlay';\nimport DateContentRow from './DateContentRow';\nimport Header from './Header';\nimport DateHeader from './DateHeader';\nimport { accessor, dateFormat } from './utils/propTypes';\nimport { segStyle, inRange, sortEvents } from './utils/eventLevels';\n\nvar eventsForWeek = function eventsForWeek(evts, start, end, props) {\n  return evts.filter(function (e) {\n    return inRange(e, start, end, props);\n  });\n};\n\nvar propTypes = {\n  events: PropTypes.array.isRequired,\n  date: PropTypes.instanceOf(Date),\n  min: PropTypes.instanceOf(Date),\n  max: PropTypes.instanceOf(Date),\n  step: PropTypes.number,\n  now: PropTypes.instanceOf(Date),\n  scrollToTime: PropTypes.instanceOf(Date),\n  eventPropGetter: PropTypes.func,\n  culture: PropTypes.string,\n  dayFormat: dateFormat,\n  rtl: PropTypes.bool,\n  width: PropTypes.number,\n  titleAccessor: accessor.isRequired,\n  allDayAccessor: accessor.isRequired,\n  startAccessor: accessor.isRequired,\n  endAccessor: accessor.isRequired,\n  selected: PropTypes.object,\n  selectable: PropTypes.oneOf([true, false, 'ignoreEvents']),\n  longPressThreshold: PropTypes.number,\n  onNavigate: PropTypes.func,\n  onSelectSlot: PropTypes.func,\n  onSelectEvent: PropTypes.func,\n  onDoubleClickEvent: PropTypes.func,\n  onShowMore: PropTypes.func,\n  onDrillDown: PropTypes.func,\n  getDrilldownView: PropTypes.func.isRequired,\n  dateFormat: dateFormat,\n  weekdayFormat: dateFormat,\n  popup: PropTypes.bool,\n  messages: PropTypes.object,\n  components: PropTypes.object.isRequired,\n  popupOffset: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    x: PropTypes.number,\n    y: PropTypes.number\n  })])\n};\n\nvar MonthView =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MonthView, _React$Component);\n\n  function MonthView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MonthView);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MonthView)).call.apply(_getPrototypeOf2, [this].concat(_args)));\n\n    _this.getContainer = function () {\n      return findDOMNode(_assertThisInitialized(_assertThisInitialized(_this)));\n    };\n\n    _this.renderWeek = function (week, weekIdx) {\n      var _this$props = _this.props,\n          events = _this$props.events,\n          components = _this$props.components,\n          selectable = _this$props.selectable,\n          titleAccessor = _this$props.titleAccessor,\n          startAccessor = _this$props.startAccessor,\n          endAccessor = _this$props.endAccessor,\n          allDayAccessor = _this$props.allDayAccessor,\n          eventPropGetter = _this$props.eventPropGetter,\n          messages = _this$props.messages,\n          selected = _this$props.selected,\n          now = _this$props.now,\n          date = _this$props.date,\n          longPressThreshold = _this$props.longPressThreshold;\n      var _this$state = _this.state,\n          needLimitMeasure = _this$state.needLimitMeasure,\n          rowLimit = _this$state.rowLimit;\n      events = eventsForWeek(events, week[0], week[week.length - 1], _this.props);\n      events.sort(function (a, b) {\n        return sortEvents(a, b, _this.props);\n      });\n      return React.createElement(DateContentRow, {\n        key: weekIdx,\n        ref: weekIdx === 0 ? 'slotRow' : undefined,\n        container: _this.getContainer,\n        className: \"rbc-month-row\",\n        now: now,\n        date: date,\n        range: week,\n        events: events,\n        maxRows: rowLimit,\n        selected: selected,\n        selectable: selectable,\n        messages: messages,\n        titleAccessor: titleAccessor,\n        startAccessor: startAccessor,\n        endAccessor: endAccessor,\n        allDayAccessor: allDayAccessor,\n        eventPropGetter: eventPropGetter,\n        renderHeader: _this.readerDateHeading,\n        renderForMeasure: needLimitMeasure,\n        onShowMore: _this.handleShowMore,\n        onSelect: _this.handleSelectEvent,\n        onDoubleClick: _this.handleDoubleClickEvent,\n        onSelectSlot: _this.handleSelectSlot,\n        eventComponent: components.event,\n        eventWrapperComponent: components.eventWrapper,\n        dateCellWrapper: components.dateCellWrapper,\n        longPressThreshold: longPressThreshold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      });\n    };\n\n    _this.readerDateHeading = function (_ref) {\n      var date = _ref.date,\n          className = _ref.className,\n          props = _objectWithoutProperties(_ref, [\"date\", \"className\"]);\n\n      var _this$props2 = _this.props,\n          currentDate = _this$props2.date,\n          getDrilldownView = _this$props2.getDrilldownView,\n          dateFormat = _this$props2.dateFormat,\n          culture = _this$props2.culture;\n      var isOffRange = dates.month(date) !== dates.month(currentDate);\n      var isCurrent = dates.eq(date, currentDate, 'day');\n      var drilldownView = getDrilldownView(date);\n      var label = localizer.format(date, dateFormat, culture);\n      var DateHeaderComponent = _this.props.components.dateHeader || DateHeader;\n      return React.createElement(\"div\", Object.assign({}, props, {\n        className: cn(className, isOffRange && 'rbc-off-range', isCurrent && 'rbc-current'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }), React.createElement(DateHeaderComponent, {\n        label: label,\n        date: date,\n        drilldownView: drilldownView,\n        isOffRange: isOffRange,\n        onDrillDown: function onDrillDown(e) {\n          return _this.handleHeadingClick(date, drilldownView, e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }));\n    };\n\n    _this.handleSelectSlot = function (range, slotInfo) {\n      _this._pendingSelection = _this._pendingSelection.concat(range);\n      clearTimeout(_this._selectTimer);\n      _this._selectTimer = setTimeout(function () {\n        return _this.selectDates(slotInfo);\n      });\n    };\n\n    _this.handleHeadingClick = function (date, view, e) {\n      e.preventDefault();\n\n      _this.clearSelection();\n\n      notify(_this.props.onDrillDown, [date, view]);\n    };\n\n    _this.handleSelectEvent = function () {\n      _this.clearSelection();\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      notify(_this.props.onSelectEvent, args);\n    };\n\n    _this.handleDoubleClickEvent = function () {\n      _this.clearSelection();\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      notify(_this.props.onDoubleClickEvent, args);\n    };\n\n    _this.handleShowMore = function (events, date, cell, slot) {\n      var _this$props3 = _this.props,\n          popup = _this$props3.popup,\n          onDrillDown = _this$props3.onDrillDown,\n          onShowMore = _this$props3.onShowMore,\n          getDrilldownView = _this$props3.getDrilldownView; //cancel any pending selections so only the event click goes through.\n\n      _this.clearSelection();\n\n      if (popup) {\n        var position = getPosition(cell, findDOMNode(_assertThisInitialized(_assertThisInitialized(_this))));\n\n        _this.setState({\n          overlay: {\n            date: date,\n            events: events,\n            position: position\n          }\n        });\n      } else {\n        notify(onDrillDown, [date, getDrilldownView(date) || views.DAY]);\n      }\n\n      notify(onShowMore, [events, date, slot]);\n    };\n\n    _this._bgRows = [];\n    _this._pendingSelection = [];\n    _this.state = {\n      rowLimit: 5,\n      needLimitMeasure: true\n    };\n    return _this;\n  }\n\n  _createClass(MonthView, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(_ref2) {\n      var date = _ref2.date;\n      this.setState({\n        needLimitMeasure: !dates.eq(date, this.props.date)\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var running;\n      if (this.state.needLimitMeasure) this.measureRowLimit(this.props);\n      window.addEventListener('resize', this._resizeListener = function () {\n        if (!running) {\n          raf(function () {\n            running = false;\n\n            _this2.setState({\n              needLimitMeasure: true\n            }); //eslint-disable-line\n\n          });\n        }\n      }, false);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.state.needLimitMeasure) this.measureRowLimit(this.props);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this._resizeListener, false);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props4 = this.props,\n          date = _this$props4.date,\n          culture = _this$props4.culture,\n          weekdayFormat = _this$props4.weekdayFormat,\n          className = _this$props4.className,\n          month = dates.visibleDays(date, culture),\n          weeks = chunk(month, 7);\n      this._weekCount = weeks.length;\n      return React.createElement(\"div\", {\n        className: cn('rbc-month-view', className),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"rbc-row rbc-month-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, this.renderHeaders(weeks[0], weekdayFormat, culture)), weeks.map(function (week, idx) {\n        return _this3.renderWeek(week, idx);\n      }), this.props.popup && this.renderOverlay());\n    }\n  }, {\n    key: \"renderHeaders\",\n    value: function renderHeaders(row, format, culture) {\n      var first = row[0];\n      var last = row[row.length - 1];\n      var HeaderComponent = this.props.components.header || Header;\n      return dates.range(first, last, 'day').map(function (day, idx) {\n        return React.createElement(\"div\", {\n          key: 'header_' + idx,\n          className: \"rbc-header \".concat(cn(dates.eq(day, new Date(), 'day') && 'rbc-today rbc-now')),\n          style: segStyle(1, 7),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248\n          },\n          __self: this\n        }, \" \", React.createElement(HeaderComponent, {\n          date: day,\n          label: localizer.format(day, format, culture),\n          localizer: localizer,\n          format: format,\n          culture: culture,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249\n          },\n          __self: this\n        }));\n      });\n    }\n  }, {\n    key: \"renderOverlay\",\n    value: function renderOverlay() {\n      var _this4 = this;\n\n      var overlay = this.state && this.state.overlay || {};\n      var components = this.props.components;\n      return React.createElement(Overlay, {\n        rootClose: true,\n        placement: \"bottom\",\n        container: this,\n        show: !!overlay.position,\n        onHide: function onHide() {\n          return _this4.setState({\n            overlay: null\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, React.createElement(Popup, Object.assign({}, this.props, {\n        eventComponent: components.event,\n        eventWrapperComponent: components.eventWrapper,\n        position: overlay.position,\n        events: overlay.events,\n        slotStart: overlay.date,\n        slotEnd: overlay.end,\n        onSelect: this.handleSelectEvent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"measureRowLimit\",\n    value: function measureRowLimit() {\n      this.setState({\n        needLimitMeasure: false,\n        rowLimit: this.refs.slotRow.getRowLimit()\n      });\n    }\n  }, {\n    key: \"selectDates\",\n    value: function selectDates(slotInfo) {\n      var slots = this._pendingSelection.slice();\n\n      this._pendingSelection = [];\n      slots.sort(function (a, b) {\n        return +a - +b;\n      });\n      notify(this.props.onSelectSlot, {\n        slots: slots,\n        start: slots[0],\n        end: slots[slots.length - 1],\n        action: slotInfo.action\n      });\n    }\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      clearTimeout(this._selectTimer);\n      this._pendingSelection = [];\n    }\n  }]);\n\n  return MonthView;\n}(React.Component);\n\nMonthView.displayName = 'MonthView';\nMonthView.propTypes = propTypes;\nMonthView.defaultProps = {\n  now: new Date()\n};\n\nMonthView.navigate = function (date, action) {\n  switch (action) {\n    case navigate.PREVIOUS:\n      return dates.add(date, -1, 'month');\n\n    case navigate.NEXT:\n      return dates.add(date, 1, 'month');\n\n    default:\n      return date;\n  }\n};\n\nMonthView.title = function (date, _ref3) {\n  var formats = _ref3.formats,\n      culture = _ref3.culture;\n  return localizer.format(date, formats.monthHeaderFormat, culture);\n};\n\nexport default MonthView;","map":{"version":3,"sources":["/Users/yukoenqvist/personaltrainer/src/Month.js"],"names":["PropTypes","React","findDOMNode","cn","dates","localizer","chunk","navigate","views","notify","getPosition","raf","Popup","Overlay","DateContentRow","Header","DateHeader","accessor","dateFormat","segStyle","inRange","sortEvents","eventsForWeek","evts","start","end","props","filter","e","propTypes","events","array","isRequired","date","instanceOf","Date","min","max","step","number","now","scrollToTime","eventPropGetter","func","culture","string","dayFormat","rtl","bool","width","titleAccessor","allDayAccessor","startAccessor","endAccessor","selected","object","selectable","oneOf","longPressThreshold","onNavigate","onSelectSlot","onSelectEvent","onDoubleClickEvent","onShowMore","onDrillDown","getDrilldownView","weekdayFormat","popup","messages","components","popupOffset","oneOfType","shape","x","y","MonthView","args","getContainer","renderWeek","week","weekIdx","state","needLimitMeasure","rowLimit","length","sort","a","b","undefined","readerDateHeading","handleShowMore","handleSelectEvent","handleDoubleClickEvent","handleSelectSlot","event","eventWrapper","dateCellWrapper","className","currentDate","isOffRange","month","isCurrent","eq","drilldownView","label","format","DateHeaderComponent","dateHeader","handleHeadingClick","range","slotInfo","_pendingSelection","concat","clearTimeout","_selectTimer","setTimeout","selectDates","view","preventDefault","clearSelection","cell","slot","position","setState","overlay","DAY","_bgRows","running","measureRowLimit","window","addEventListener","_resizeListener","removeEventListener","visibleDays","weeks","_weekCount","renderHeaders","map","idx","renderOverlay","row","first","last","HeaderComponent","header","day","refs","slotRow","getRowLimit","slots","slice","action","Component","displayName","defaultProps","PREVIOUS","add","NEXT","title","formats","monthHeaderFormat"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types'\nimport React from 'react'\nimport { findDOMNode } from 'react-dom'\nimport cn from 'classnames'\n\nimport dates from './utils/dates'\nimport localizer from './localizer'\nimport chunk from 'lodash/chunk'\n\nimport { navigate, views } from './utils/constants'\nimport { notify } from './utils/helpers'\nimport getPosition from 'dom-helpers/query/position'\nimport raf from 'dom-helpers/util/requestAnimationFrame'\n\nimport Popup from './Popup'\nimport Overlay from 'react-overlays/lib/Overlay'\nimport DateContentRow from './DateContentRow'\nimport Header from './Header'\nimport DateHeader from './DateHeader'\n\nimport { accessor, dateFormat } from './utils/propTypes'\nimport { segStyle, inRange, sortEvents } from './utils/eventLevels'\n\n\nlet eventsForWeek = (evts, start, end, props) =>\n  evts.filter(e => inRange(e, start, end, props))\n\nlet propTypes = {\n  events: PropTypes.array.isRequired,\n  date: PropTypes.instanceOf(Date),\n\n  min: PropTypes.instanceOf(Date),\n  max: PropTypes.instanceOf(Date),\n\n  step: PropTypes.number,\n  now: PropTypes.instanceOf(Date),\n\n  scrollToTime: PropTypes.instanceOf(Date),\n  eventPropGetter: PropTypes.func,\n\n  culture: PropTypes.string,\n  dayFormat: dateFormat,\n\n  rtl: PropTypes.bool,\n  width: PropTypes.number,\n\n  titleAccessor: accessor.isRequired,\n  allDayAccessor: accessor.isRequired,\n  startAccessor: accessor.isRequired,\n  endAccessor: accessor.isRequired,\n\n  selected: PropTypes.object,\n  selectable: PropTypes.oneOf([true, false, 'ignoreEvents']),\n  longPressThreshold: PropTypes.number,\n\n  onNavigate: PropTypes.func,\n  onSelectSlot: PropTypes.func,\n  onSelectEvent: PropTypes.func,\n  onDoubleClickEvent: PropTypes.func,\n  onShowMore: PropTypes.func,\n  onDrillDown: PropTypes.func,\n  getDrilldownView: PropTypes.func.isRequired,\n\n  dateFormat,\n\n  weekdayFormat: dateFormat,\n  popup: PropTypes.bool,\n\n  messages: PropTypes.object,\n  components: PropTypes.object.isRequired,\n  popupOffset: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number,\n    }),\n  ]),\n}\n\nclass MonthView extends React.Component {\n  static displayName = 'MonthView'\n  static propTypes = propTypes\n\n  static defaultProps = {\n    now: new Date()\n  }\n\n  constructor(...args) {\n    super(...args)\n\n    this._bgRows = []\n    this._pendingSelection = []\n    this.state = {\n      rowLimit: 5,\n      needLimitMeasure: true,\n    }\n  }\n\n  componentWillReceiveProps({ date }) {\n    this.setState({\n      needLimitMeasure: !dates.eq(date, this.props.date),\n    })\n  }\n\n  componentDidMount() {\n    let running\n\n    if (this.state.needLimitMeasure) this.measureRowLimit(this.props)\n\n    window.addEventListener(\n      'resize',\n      (this._resizeListener = () => {\n        if (!running) {\n          raf(() => {\n            running = false\n            this.setState({ needLimitMeasure: true }) //eslint-disable-line\n          })\n        }\n      }),\n      false\n    )\n  }\n\n  componentDidUpdate() {\n    if (this.state.needLimitMeasure) this.measureRowLimit(this.props)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this._resizeListener, false)\n  }\n\n  getContainer = () => {\n    return findDOMNode(this)\n  }\n\n  render() {\n    let { date, culture, weekdayFormat, className } = this.props,\n      month = dates.visibleDays(date, culture),\n      weeks = chunk(month, 7)\n\n    this._weekCount = weeks.length\n\n    return (\n      <div className={cn('rbc-month-view', className)}>\n        <div className=\"rbc-row rbc-month-header\">\n          {this.renderHeaders(weeks[0], weekdayFormat, culture)}\n        </div>\n        {weeks.map((week, idx) => this.renderWeek(week, idx))}\n        {this.props.popup && this.renderOverlay()}\n      </div>\n    )\n  }\n\n  renderWeek = (week, weekIdx) => {\n    let {\n      events,\n      components,\n      selectable,\n      titleAccessor,\n      startAccessor,\n      endAccessor,\n      allDayAccessor,\n      eventPropGetter,\n      messages,\n      selected,\n      now,\n      date,\n      longPressThreshold,\n    } = this.props\n\n    const { needLimitMeasure, rowLimit } = this.state\n\n    events = eventsForWeek(events, week[0], week[week.length - 1], this.props)\n    events.sort((a, b) => sortEvents(a, b, this.props))\n\n    return (\n      <DateContentRow\n        key={weekIdx}\n        ref={weekIdx === 0 ? 'slotRow' : undefined}\n        container={this.getContainer}\n        className=\"rbc-month-row\"\n        now={now}\n        date={date}\n        range={week}\n        events={events}\n        maxRows={rowLimit}\n        selected={selected}\n        selectable={selectable}\n        messages={messages}\n        titleAccessor={titleAccessor}\n        startAccessor={startAccessor}\n        endAccessor={endAccessor}\n        allDayAccessor={allDayAccessor}\n        eventPropGetter={eventPropGetter}\n        renderHeader={this.readerDateHeading}\n        renderForMeasure={needLimitMeasure}\n        onShowMore={this.handleShowMore}\n        onSelect={this.handleSelectEvent}\n        onDoubleClick={this.handleDoubleClickEvent}\n        onSelectSlot={this.handleSelectSlot}\n        eventComponent={components.event}\n        eventWrapperComponent={components.eventWrapper}\n        dateCellWrapper={components.dateCellWrapper}\n        longPressThreshold={longPressThreshold}\n      />\n    )\n  }\n\n  readerDateHeading = ({ date, className, ...props }) => {\n    let {\n      date: currentDate,\n      getDrilldownView,\n      dateFormat,\n      culture,\n    } = this.props\n\n    let isOffRange = dates.month(date) !== dates.month(currentDate)\n    let isCurrent = dates.eq(date, currentDate, 'day')\n    let drilldownView = getDrilldownView(date)\n    let label = localizer.format(date, dateFormat, culture)\n    let DateHeaderComponent = this.props.components.dateHeader || DateHeader\n\n    return (\n      <div\n        {...props}\n        className={cn(\n          className,\n          isOffRange && 'rbc-off-range',\n          isCurrent && 'rbc-current'\n        )}\n      >\n        <DateHeaderComponent\n          label={label}\n          date={date}\n          drilldownView={drilldownView}\n          isOffRange={isOffRange}\n          onDrillDown={e => this.handleHeadingClick(date, drilldownView, e)} />\n      </div>\n    )\n  }\n\n  renderHeaders(row, format, culture) {\n    let first = row[0]\n    let last = row[row.length - 1]\n    let HeaderComponent = this.props.components.header || Header\n\n    return dates.range(first, last, 'day').map((day, idx) => (\n      <div key={'header_' + idx} className={`rbc-header ${cn(dates.eq(day, new Date(), 'day') && 'rbc-today rbc-now')}`} style={segStyle(1, 7)}> {/* edited by onursimsek94 */}\n        <HeaderComponent\n          date={day}\n          label={localizer.format(day, format, culture)}\n          localizer={localizer}\n          format={format}\n          culture={culture}\n        />\n      </div>\n    ))\n  }\n\n  renderOverlay () {\n    let overlay = (this.state && this.state.overlay) || {}\n    let { components } = this.props\n\n    return (\n      <Overlay\n        rootClose\n        placement=\"bottom\"\n        container={this}\n        show={!!overlay.position}\n        onHide={() => this.setState({ overlay: null })}\n      >\n        <Popup\n          {...this.props}\n          eventComponent={components.event}\n          eventWrapperComponent={components.eventWrapper}\n          position={overlay.position}\n          events={overlay.events}\n          slotStart={overlay.date}\n          slotEnd={overlay.end}\n          onSelect={this.handleSelectEvent}\n        />\n      </Overlay>\n    )\n  }\n\n  measureRowLimit() {\n    this.setState({\n      needLimitMeasure: false,\n      rowLimit: this.refs.slotRow.getRowLimit(),\n    })\n  }\n\n  handleSelectSlot = (range, slotInfo) => {\n    this._pendingSelection = this._pendingSelection.concat(range)\n\n    clearTimeout(this._selectTimer)\n    this._selectTimer = setTimeout(() => this.selectDates(slotInfo))\n  }\n\n  handleHeadingClick = (date, view, e) => {\n    e.preventDefault()\n    this.clearSelection()\n    notify(this.props.onDrillDown, [date, view])\n  }\n\n  handleSelectEvent = (...args) => {\n    this.clearSelection()\n    notify(this.props.onSelectEvent, args)\n  }\n\n  handleDoubleClickEvent = (...args) => {\n    this.clearSelection()\n    notify(this.props.onDoubleClickEvent, args)\n  }\n\n  handleShowMore = (events, date, cell, slot) => {\n    const { popup, onDrillDown, onShowMore, getDrilldownView } = this.props\n    //cancel any pending selections so only the event click goes through.\n    this.clearSelection()\n\n    if (popup) {\n      let position = getPosition(cell, findDOMNode(this))\n\n      this.setState({\n        overlay: { date, events, position },\n      })\n    } else {\n      notify(onDrillDown, [date, getDrilldownView(date) || views.DAY])\n    }\n\n    notify(onShowMore, [events, date, slot])\n  }\n\n  selectDates(slotInfo) {\n    let slots = this._pendingSelection.slice()\n\n    this._pendingSelection = []\n\n    slots.sort((a, b) => +a - +b)\n\n    notify(this.props.onSelectSlot, {\n      slots,\n      start: slots[0],\n      end: slots[slots.length - 1],\n      action: slotInfo.action,\n    })\n  }\n\n  clearSelection() {\n    clearTimeout(this._selectTimer)\n    this._pendingSelection = []\n  }\n}\n\nMonthView.navigate = (date, action) => {\n  switch (action) {\n    case navigate.PREVIOUS:\n      return dates.add(date, -1, 'month')\n\n    case navigate.NEXT:\n      return dates.add(date, 1, 'month')\n\n    default:\n      return date\n  }\n}\n\n\nMonthView.title = (date, { formats, culture }) =>\n  localizer.format(date, formats.monthHeaderFormat, culture);\n\n\nexport default MonthView\n"]},"metadata":{},"sourceType":"module"}