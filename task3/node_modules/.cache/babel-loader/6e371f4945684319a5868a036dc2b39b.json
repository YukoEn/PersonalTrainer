{"ast":null,"code":"import _objectSpread from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/yukoenqvist/personaltrainer/src/EventEndingRow.js\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport EventRowMixin from './EventRowMixin';\nimport { eventLevels } from './utils/eventLevels';\nimport message from './utils/messages';\nimport range from 'lodash/range';\n\nvar isSegmentInSlot = function isSegmentInSlot(seg, slot) {\n  return seg.left <= slot && seg.right >= slot;\n};\n\nvar eventsInSlot = function eventsInSlot(segments, slot) {\n  return segments.filter(function (seg) {\n    return isSegmentInSlot(seg, slot);\n  }).length;\n};\n\nvar EventEndingRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EventEndingRow, _React$Component);\n\n  function EventEndingRow() {\n    _classCallCheck(this, EventEndingRow);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(EventEndingRow).apply(this, arguments));\n  }\n\n  _createClass(EventEndingRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          segments = _this$props.segments,\n          slotCount = _this$props.slots;\n      var rowSegments = eventLevels(segments).levels[0];\n      var current = 1,\n          lastEnd = 1,\n          row = [];\n\n      while (current <= slotCount) {\n        var key = '_lvl_' + current;\n\n        var _ref = rowSegments.filter(function (seg) {\n          return isSegmentInSlot(seg, current);\n        })[0] || {},\n            event = _ref.event,\n            left = _ref.left,\n            right = _ref.right,\n            span = _ref.span; //eslint-disable-line\n\n\n        if (!event) {\n          current++;\n          continue;\n        }\n\n        var gap = Math.max(0, left - lastEnd);\n\n        if (this.canRenderSlotEvent(left, span)) {\n          var content = EventRowMixin.renderEvent(this.props, event);\n\n          if (gap) {\n            row.push(EventRowMixin.renderSpan(this.props, gap, key + '_gap'));\n          }\n\n          row.push(EventRowMixin.renderSpan(this.props, span, key, content));\n          lastEnd = current = right + 1;\n        } else {\n          if (gap) {\n            row.push(EventRowMixin.renderSpan(this.props, gap, key + '_gap'));\n          }\n\n          row.push(EventRowMixin.renderSpan(this.props, 1, key, this.renderShowMore(segments, current)));\n          lastEnd = current = current + 1;\n        }\n      }\n\n      return React.createElement(\"div\", {\n        className: \"rbc-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, row);\n    }\n  }, {\n    key: \"canRenderSlotEvent\",\n    value: function canRenderSlotEvent(slot, span) {\n      var segments = this.props.segments;\n      return range(slot, slot + span).every(function (s) {\n        var count = eventsInSlot(segments, s);\n        return count === 1;\n      });\n    }\n  }, {\n    key: \"renderShowMore\",\n    value: function renderShowMore(segments, slot) {\n      var _this = this;\n\n      var messages = message(this.props.messages);\n      var count = eventsInSlot(segments, slot);\n      return count ? React.createElement(\"a\", {\n        key: 'sm_' + slot,\n        href: \"#\",\n        className: 'rbc-show-more',\n        onClick: function onClick(e) {\n          return _this.showMore(slot, e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, messages.showMore(count)) : false;\n    }\n  }, {\n    key: \"showMore\",\n    value: function showMore(slot, e) {\n      e.preventDefault();\n      this.props.onShowMore(slot);\n    }\n  }]);\n\n  return EventEndingRow;\n}(React.Component);\n\nEventEndingRow.propTypes = _objectSpread({\n  segments: PropTypes.array,\n  slots: PropTypes.number,\n  messages: PropTypes.object,\n  onShowMore: PropTypes.func\n}, EventRowMixin.propTypes);\nEventEndingRow.defaultProps = _objectSpread({}, EventRowMixin.defaultProps);\nexport default EventEndingRow;","map":{"version":3,"sources":["/Users/yukoenqvist/personaltrainer/src/EventEndingRow.js"],"names":["PropTypes","React","EventRowMixin","eventLevels","message","range","isSegmentInSlot","seg","slot","left","right","eventsInSlot","segments","filter","length","EventEndingRow","props","slotCount","slots","rowSegments","levels","current","lastEnd","row","key","event","span","gap","Math","max","canRenderSlotEvent","content","renderEvent","push","renderSpan","renderShowMore","every","s","count","messages","e","showMore","preventDefault","onShowMore","Component","propTypes","array","number","object","func","defaultProps"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types'\nimport React from 'react'\nimport EventRowMixin from './EventRowMixin'\nimport { eventLevels } from './utils/eventLevels'\nimport message from './utils/messages'\nimport range from 'lodash/range'\n\nlet isSegmentInSlot = (seg, slot) => seg.left <= slot && seg.right >= slot\nlet eventsInSlot = (segments, slot) =>\n  segments.filter(seg => isSegmentInSlot(seg, slot)).length\n\nclass EventEndingRow extends React.Component {\n  static propTypes = {\n    segments: PropTypes.array,\n    slots: PropTypes.number,\n    messages: PropTypes.object,\n    onShowMore: PropTypes.func,\n    ...EventRowMixin.propTypes,\n  }\n  static defaultProps = {\n    ...EventRowMixin.defaultProps,\n  }\n\n  render() {\n    let { segments, slots: slotCount } = this.props\n    let rowSegments = eventLevels(segments).levels[0]\n\n    let current = 1, lastEnd = 1, row = []\n\n    while (current <= slotCount) {\n      let key = '_lvl_' + current\n\n      let { event, left, right, span } = rowSegments.filter(seg =>\n        isSegmentInSlot(seg, current)\n      )[0] || {} //eslint-disable-line\n\n      if (!event) {\n        current++\n        continue\n      }\n\n      let gap = Math.max(0, left - lastEnd)\n\n      if (this.canRenderSlotEvent(left, span)) {\n        let content = EventRowMixin.renderEvent(this.props, event)\n\n        if (gap) {\n          row.push(EventRowMixin.renderSpan(this.props, gap, key + '_gap'))\n        }\n\n        row.push(EventRowMixin.renderSpan(this.props, span, key, content))\n\n        lastEnd = current = right + 1\n      } else {\n        if (gap) {\n          row.push(EventRowMixin.renderSpan(this.props, gap, key + '_gap'))\n        }\n\n        row.push(\n          EventRowMixin.renderSpan(\n            this.props,\n            1,\n            key,\n            this.renderShowMore(segments, current)\n          )\n        )\n        lastEnd = current = current + 1\n      }\n    }\n\n    return (\n      <div className=\"rbc-row\">\n        {row}\n      </div>\n    )\n  }\n\n  canRenderSlotEvent(slot, span) {\n    let { segments } = this.props\n\n    return range(slot, slot + span).every(s => {\n      let count = eventsInSlot(segments, s)\n\n      return count === 1\n    })\n  }\n\n  renderShowMore(segments, slot) {\n    let messages = message(this.props.messages)\n    let count = eventsInSlot(segments, slot)\n\n    return count\n      ? <a\n          key={'sm_' + slot}\n          href=\"#\"\n          className={'rbc-show-more'}\n          onClick={e => this.showMore(slot, e)}\n        >\n          {messages.showMore(count)}\n        </a>\n      : false\n  }\n\n  showMore(slot, e) {\n    e.preventDefault()\n    this.props.onShowMore(slot)\n  }\n}\n\nexport default EventEndingRow\n"]},"metadata":{},"sourceType":"module"}