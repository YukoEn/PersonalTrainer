{"ast":null,"code":"var _jsxFileName = \"/Users/yukoenqvist/personaltrainer/src/EventRowMixin.js\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport EventCell from './EventCell';\nimport getHeight from 'dom-helpers/query/height';\nimport { accessor, elementType } from './utils/propTypes';\nimport { segStyle } from './utils/eventLevels';\nimport { isSelected } from './utils/selection';\n/* eslint-disable react/prop-types */\n\nexport default {\n  propTypes: {\n    slots: PropTypes.number.isRequired,\n    end: PropTypes.instanceOf(Date),\n    start: PropTypes.instanceOf(Date),\n    selected: PropTypes.object,\n    eventPropGetter: PropTypes.func,\n    titleAccessor: accessor,\n    allDayAccessor: accessor,\n    startAccessor: accessor,\n    endAccessor: accessor,\n    eventComponent: elementType,\n    eventWrapperComponent: elementType.isRequired,\n    onSelect: PropTypes.func,\n    onDoubleClick: PropTypes.func\n  },\n  defaultProps: {\n    segments: [],\n    selected: {},\n    slots: 7\n  },\n  renderEvent: function renderEvent(props, event) {\n    var eventPropGetter = props.eventPropGetter,\n        selected = props.selected,\n        start = props.start,\n        end = props.end,\n        startAccessor = props.startAccessor,\n        endAccessor = props.endAccessor,\n        titleAccessor = props.titleAccessor,\n        allDayAccessor = props.allDayAccessor,\n        eventComponent = props.eventComponent,\n        eventWrapperComponent = props.eventWrapperComponent,\n        onSelect = props.onSelect,\n        onDoubleClick = props.onDoubleClick;\n    return React.createElement(EventCell, {\n      event: event,\n      eventWrapperComponent: eventWrapperComponent,\n      eventPropGetter: eventPropGetter,\n      onSelect: onSelect,\n      onDoubleClick: onDoubleClick,\n      selected: isSelected(event, selected),\n      startAccessor: startAccessor,\n      endAccessor: endAccessor,\n      titleAccessor: titleAccessor,\n      allDayAccessor: allDayAccessor,\n      slotStart: start,\n      slotEnd: end,\n      eventComponent: eventComponent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    });\n  },\n  renderSpan: function renderSpan(props, len, key) {\n    var content = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n    var slots = props.slots;\n    return React.createElement(\"div\", {\n      key: key,\n      className: \"rbc-row-segment\",\n      style: segStyle(Math.abs(len), slots),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, content);\n  },\n  getRowHeight: function getRowHeight() {\n    getHeight(findDOMNode(this));\n  }\n};","map":{"version":3,"sources":["/Users/yukoenqvist/personaltrainer/src/EventRowMixin.js"],"names":["PropTypes","React","findDOMNode","EventCell","getHeight","accessor","elementType","segStyle","isSelected","propTypes","slots","number","isRequired","end","instanceOf","Date","start","selected","object","eventPropGetter","func","titleAccessor","allDayAccessor","startAccessor","endAccessor","eventComponent","eventWrapperComponent","onSelect","onDoubleClick","defaultProps","segments","renderEvent","props","event","renderSpan","len","key","content","Math","abs","getRowHeight"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,mBAAtC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAEA;;AACA,eAAe;AACbC,EAAAA,SAAS,EAAE;AACTC,IAAAA,KAAK,EAAEV,SAAS,CAACW,MAAV,CAAiBC,UADf;AAETC,IAAAA,GAAG,EAAEb,SAAS,CAACc,UAAV,CAAqBC,IAArB,CAFI;AAGTC,IAAAA,KAAK,EAAEhB,SAAS,CAACc,UAAV,CAAqBC,IAArB,CAHE;AAKTE,IAAAA,QAAQ,EAAEjB,SAAS,CAACkB,MALX;AAMTC,IAAAA,eAAe,EAAEnB,SAAS,CAACoB,IANlB;AAOTC,IAAAA,aAAa,EAAEhB,QAPN;AAQTiB,IAAAA,cAAc,EAAEjB,QARP;AASTkB,IAAAA,aAAa,EAAElB,QATN;AAUTmB,IAAAA,WAAW,EAAEnB,QAVJ;AAYToB,IAAAA,cAAc,EAAEnB,WAZP;AAaToB,IAAAA,qBAAqB,EAAEpB,WAAW,CAACM,UAb1B;AAcTe,IAAAA,QAAQ,EAAE3B,SAAS,CAACoB,IAdX;AAeTQ,IAAAA,aAAa,EAAE5B,SAAS,CAACoB;AAfhB,GADE;AAmBbS,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE,EADE;AAEZb,IAAAA,QAAQ,EAAE,EAFE;AAGZP,IAAAA,KAAK,EAAE;AAHK,GAnBD;AAyBbqB,EAAAA,WAzBa,uBAyBDC,KAzBC,EAyBMC,KAzBN,EAyBa;AAAA,QAEpBd,eAFoB,GAOFa,KAPE,CAEpBb,eAFoB;AAAA,QAEHF,QAFG,GAOFe,KAPE,CAEHf,QAFG;AAAA,QAEOD,KAFP,GAOFgB,KAPE,CAEOhB,KAFP;AAAA,QAEcH,GAFd,GAOFmB,KAPE,CAEcnB,GAFd;AAAA,QAGpBU,aAHoB,GAOFS,KAPE,CAGpBT,aAHoB;AAAA,QAGLC,WAHK,GAOFQ,KAPE,CAGLR,WAHK;AAAA,QAGQH,aAHR,GAOFW,KAPE,CAGQX,aAHR;AAAA,QAIpBC,cAJoB,GAOFU,KAPE,CAIpBV,cAJoB;AAAA,QAIJG,cAJI,GAOFO,KAPE,CAIJP,cAJI;AAAA,QAKpBC,qBALoB,GAOFM,KAPE,CAKpBN,qBALoB;AAAA,QAMpBC,QANoB,GAOFK,KAPE,CAMpBL,QANoB;AAAA,QAOpBC,aAPoB,GAOFI,KAPE,CAOpBJ,aAPoB;AASxB,WACE,oBAAC,SAAD;AACE,MAAA,KAAK,EAAEK,KADT;AAEE,MAAA,qBAAqB,EAAEP,qBAFzB;AAGE,MAAA,eAAe,EAAEP,eAHnB;AAIE,MAAA,QAAQ,EAAEQ,QAJZ;AAKE,MAAA,aAAa,EAAEC,aALjB;AAME,MAAA,QAAQ,EAAEpB,UAAU,CAACyB,KAAD,EAAQhB,QAAR,CANtB;AAOE,MAAA,aAAa,EAAEM,aAPjB;AAQE,MAAA,WAAW,EAAEC,WARf;AASE,MAAA,aAAa,EAAEH,aATjB;AAUE,MAAA,cAAc,EAAEC,cAVlB;AAWE,MAAA,SAAS,EAAEN,KAXb;AAYE,MAAA,OAAO,EAAEH,GAZX;AAaE,MAAA,cAAc,EAAEY,cAblB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAiBD,GAnDY;AAqDbS,EAAAA,UArDa,sBAqDFF,KArDE,EAqDKG,GArDL,EAqDUC,GArDV,EAqD6B;AAAA,QAAdC,OAAc,uEAAJ,GAAI;AAAA,QAClC3B,KADkC,GACxBsB,KADwB,CAClCtB,KADkC;AAGxC,WACE;AAAK,MAAA,GAAG,EAAE0B,GAAV;AAAe,MAAA,SAAS,EAAC,iBAAzB;AAA2C,MAAA,KAAK,EAAE7B,QAAQ,CAAC+B,IAAI,CAACC,GAAL,CAASJ,GAAT,CAAD,EAAgBzB,KAAhB,CAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG2B,OADH,CADF;AAKD,GA7DY;AA+DbG,EAAAA,YA/Da,0BA+DC;AACZpC,IAAAA,SAAS,CAACF,WAAW,CAAC,IAAD,CAAZ,CAAT;AACD;AAjEY,CAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport EventCell from './EventCell';\nimport getHeight from 'dom-helpers/query/height';\nimport { accessor, elementType } from './utils/propTypes';\nimport { segStyle } from './utils/eventLevels';\nimport { isSelected } from './utils/selection';\n\n/* eslint-disable react/prop-types */\nexport default {\n  propTypes: {\n    slots: PropTypes.number.isRequired,\n    end: PropTypes.instanceOf(Date),\n    start: PropTypes.instanceOf(Date),\n\n    selected: PropTypes.object,\n    eventPropGetter: PropTypes.func,\n    titleAccessor: accessor,\n    allDayAccessor: accessor,\n    startAccessor: accessor,\n    endAccessor: accessor,\n\n    eventComponent: elementType,\n    eventWrapperComponent: elementType.isRequired,\n    onSelect: PropTypes.func,\n    onDoubleClick: PropTypes.func\n  },\n\n  defaultProps: {\n    segments: [],\n    selected: {},\n    slots: 7\n  },\n\n  renderEvent(props, event) {\n    let {\n        eventPropGetter, selected, start, end\n      , startAccessor, endAccessor, titleAccessor\n      , allDayAccessor, eventComponent\n      , eventWrapperComponent\n      , onSelect\n      , onDoubleClick } = props;\n\n    return (\n      <EventCell\n        event={event}\n        eventWrapperComponent={eventWrapperComponent}\n        eventPropGetter={eventPropGetter}\n        onSelect={onSelect}\n        onDoubleClick={onDoubleClick}\n        selected={isSelected(event, selected)}\n        startAccessor={startAccessor}\n        endAccessor={endAccessor}\n        titleAccessor={titleAccessor}\n        allDayAccessor={allDayAccessor}\n        slotStart={start}\n        slotEnd={end}\n        eventComponent={eventComponent}\n      />\n    )\n  },\n\n  renderSpan(props, len, key, content = ' '){\n    let { slots } = props;\n\n    return (\n      <div key={key} className='rbc-row-segment' style={segStyle(Math.abs(len), slots)}>\n        {content}\n      </div>\n    )\n  },\n\n  getRowHeight(){\n    getHeight(findDOMNode(this))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}