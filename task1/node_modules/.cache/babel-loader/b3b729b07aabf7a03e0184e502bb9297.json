{"ast":null,"code":"import _objectSpread from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\n/* eslint no-fallthrough: off */\nimport dateMath from 'date-arithmetic';\nimport localizer from '../localizer';\nvar MILLI = {\n  seconds: 1000,\n  minutes: 1000 * 60,\n  hours: 1000 * 60 * 60,\n  day: 1000 * 60 * 60 * 24\n};\nvar MONTHS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n\nvar dates = _objectSpread({}, dateMath, {\n  monthsInYear: function monthsInYear(year) {\n    var date = new Date(year, 0, 1);\n    return MONTHS.map(function (i) {\n      return dates.month(date, i);\n    });\n  },\n  firstVisibleDay: function firstVisibleDay(date, culture) {\n    var firstOfMonth = dates.startOf(date, 'month');\n    return dates.startOf(firstOfMonth, 'week', localizer.startOfWeek(culture));\n  },\n  lastVisibleDay: function lastVisibleDay(date, culture) {\n    var endOfMonth = dates.endOf(date, 'month');\n    return dates.endOf(endOfMonth, 'week', localizer.startOfWeek(culture));\n  },\n  visibleDays: function visibleDays(date, culture) {\n    var current = dates.firstVisibleDay(date, culture),\n        last = dates.lastVisibleDay(date, culture),\n        days = [];\n\n    while (dates.lte(current, last, 'day')) {\n      days.push(current);\n      current = dates.add(current, 1, 'day');\n    }\n\n    return days;\n  },\n  ceil: function ceil(date, unit) {\n    var floor = dates.startOf(date, unit);\n    return dates.eq(floor, date) ? floor : dates.add(floor, 1, unit);\n  },\n  range: function range(start, end) {\n    var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'day';\n    var current = start,\n        days = [];\n\n    while (dates.lte(current, end, unit)) {\n      days.push(current);\n      current = dates.add(current, 1, unit);\n    }\n\n    return days;\n  },\n  merge: function merge(date, time) {\n    if (time == null && date == null) return null;\n    if (time == null) time = new Date();\n    if (date == null) date = new Date();\n    date = dates.startOf(date, 'day');\n    date = dates.hours(date, dates.hours(time));\n    date = dates.minutes(date, dates.minutes(time));\n    date = dates.seconds(date, dates.seconds(time));\n    return dates.milliseconds(date, dates.milliseconds(time));\n  },\n  sameMonth: function sameMonth(dateA, dateB) {\n    return dates.eq(dateA, dateB, 'month');\n  },\n  isToday: function isToday(date) {\n    return dates.eq(date, dates.today(), 'day');\n  },\n  eqTime: function eqTime(dateA, dateB) {\n    return dates.hours(dateA) === dates.hours(dateB) && dates.minutes(dateA) === dates.minutes(dateB) && dates.seconds(dateA) === dates.seconds(dateB);\n  },\n  isJustDate: function isJustDate(date) {\n    return dates.hours(date) === 0 && dates.minutes(date) === 0 && dates.seconds(date) === 0 && dates.milliseconds(date) === 0;\n  },\n  duration: function duration(start, end, unit, firstOfWeek) {\n    if (unit === 'day') unit = 'date';\n    return Math.abs(dates[unit](start, undefined, firstOfWeek) - dates[unit](end, undefined, firstOfWeek));\n  },\n  diff: function diff(dateA, dateB, unit) {\n    if (!unit || unit === 'milliseconds') return Math.abs(+dateA - +dateB); // the .round() handles an edge case\n    // with DST where the total won't be exact\n    // since one day in the range may be shorter/longer by an hour\n\n    return Math.round(Math.abs(+dates.startOf(dateA, unit) / MILLI[unit] - +dates.startOf(dateB, unit) / MILLI[unit]));\n  },\n  total: function total(date, unit) {\n    var ms = date.getTime(),\n        div = 1;\n\n    switch (unit) {\n      case 'week':\n        div *= 7;\n\n      case 'day':\n        div *= 24;\n\n      case 'hours':\n        div *= 60;\n\n      case 'minutes':\n        div *= 60;\n\n      case 'seconds':\n        div *= 1000;\n    }\n\n    return ms / div;\n  },\n  week: function week(date) {\n    var d = new Date(date);\n    d.setHours(0, 0, 0);\n    d.setDate(d.getDate() + 4 - (d.getDay() || 7));\n    return Math.ceil(((d - new Date(d.getFullYear(), 0, 1)) / 8.64e7 + 1) / 7);\n  },\n  today: function today() {\n    return dates.startOf(new Date(), 'day');\n  },\n  yesterday: function yesterday() {\n    return dates.add(dates.startOf(new Date(), 'day'), -1, 'day');\n  },\n  tomorrow: function tomorrow() {\n    return dates.add(dates.startOf(new Date(), 'day'), 1, 'day');\n  }\n});\n\nexport default dates;","map":{"version":3,"sources":["/Users/yukoenqvist/personaltrainer/src/utils/dates.js"],"names":["dateMath","localizer","MILLI","seconds","minutes","hours","day","MONTHS","dates","monthsInYear","year","date","Date","map","i","month","firstVisibleDay","culture","firstOfMonth","startOf","startOfWeek","lastVisibleDay","endOfMonth","endOf","visibleDays","current","last","days","lte","push","add","ceil","unit","floor","eq","range","start","end","merge","time","milliseconds","sameMonth","dateA","dateB","isToday","today","eqTime","isJustDate","duration","firstOfWeek","Math","abs","undefined","diff","round","total","ms","getTime","div","week","d","setHours","setDate","getDate","getDay","getFullYear","yesterday","tomorrow"],"mappings":"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","sourcesContent":["/* eslint no-fallthrough: off */\nimport dateMath from 'date-arithmetic';\nimport localizer from '../localizer';\n\nconst MILLI = {\n  seconds: 1000,\n  minutes: 1000 * 60,\n  hours: 1000 * 60 * 60,\n  day: 1000 * 60 * 60 * 24\n}\n\nconst MONTHS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\nlet dates = {\n\n  ...dateMath,\n\n  monthsInYear(year){\n    let date = new Date(year, 0, 1)\n\n    return MONTHS.map(i => dates.month(date, i))\n  },\n\n  firstVisibleDay(date, culture){\n    let firstOfMonth = dates.startOf(date, 'month')\n\n    return dates.startOf(firstOfMonth, 'week', localizer.startOfWeek(culture));\n  },\n\n  lastVisibleDay(date, culture){\n    let endOfMonth = dates.endOf(date, 'month')\n\n    return dates.endOf(endOfMonth, 'week', localizer.startOfWeek(culture));\n  },\n\n  visibleDays(date, culture){\n    let current = dates.firstVisibleDay(date, culture)\n      , last = dates.lastVisibleDay(date, culture)\n      , days = [];\n\n    while (dates.lte(current, last, 'day')) {\n      days.push(current)\n      current = dates.add(current, 1, 'day')\n    }\n\n    return days\n  },\n\n  ceil(date, unit){\n    let floor = dates.startOf(date, unit)\n\n    return dates.eq(floor, date) ? floor : dates.add(floor, 1, unit)\n  },\n\n  range(start, end, unit = 'day'){\n    let current = start\n      , days = [];\n\n    while (dates.lte(current, end, unit)) {\n      days.push(current)\n      current = dates.add(current, 1, unit)\n    }\n\n    return days\n  },\n\n  merge(date, time){\n    if( time == null && date == null)\n      return null\n\n    if (time == null) time = new Date()\n    if (date == null) date = new Date()\n\n    date = dates.startOf(date, 'day')\n    date = dates.hours(date,        dates.hours(time))\n    date = dates.minutes(date,      dates.minutes(time))\n    date = dates.seconds(date,      dates.seconds(time))\n    return dates.milliseconds(date, dates.milliseconds(time))\n  },\n\n  sameMonth(dateA, dateB){\n    return dates.eq(dateA, dateB, 'month')\n  },\n\n  isToday(date) {\n    return dates.eq(date, dates.today(), 'day')\n  },\n\n  eqTime(dateA, dateB){\n    return dates.hours(dateA) === dates.hours(dateB)\n      && dates.minutes(dateA) === dates.minutes(dateB)\n      && dates.seconds(dateA) === dates.seconds(dateB)\n  },\n\n  isJustDate(date){\n    return (\n         dates.hours(date) === 0\n      && dates.minutes(date) === 0\n      && dates.seconds(date) === 0\n      && dates.milliseconds(date) === 0\n    )\n  },\n\n  duration(start, end, unit, firstOfWeek){\n    if (unit === 'day') unit = 'date';\n    return Math.abs(dates[unit](start, undefined, firstOfWeek) - dates[unit](end, undefined, firstOfWeek))\n  },\n\n  diff(dateA, dateB, unit){\n    if (!unit || unit === 'milliseconds')\n      return Math.abs(+dateA - +dateB)\n\n    // the .round() handles an edge case\n    // with DST where the total won't be exact\n    // since one day in the range may be shorter/longer by an hour\n    return Math.round(Math.abs(\n      (+dates.startOf(dateA, unit) / MILLI[unit]) - (+dates.startOf(dateB, unit) / MILLI[unit])\n    ))\n  },\n\n  total(date, unit) {\n    let ms = date.getTime()\n      , div = 1;\n\n    switch (unit) {\n      case 'week':\n        div *= 7\n      case 'day':\n        div *= 24\n      case 'hours':\n        div *= 60\n      case 'minutes':\n        div *= 60\n      case 'seconds':\n        div *= 1000;\n    }\n\n    return ms / div;\n  },\n\n  week(date){\n    var d = new Date(date);\n    d.setHours(0, 0, 0);\n    d.setDate(d.getDate() + 4 - (d.getDay() || 7));\n    return Math.ceil((((d - new Date(d.getFullYear(), 0, 1)) / 8.64e7 ) + 1) / 7);\n  },\n\n  today() {\n    return dates.startOf(new Date(), 'day')\n  },\n\n  yesterday() {\n    return dates.add(dates.startOf(new Date(), 'day'), -1, 'day')\n  },\n\n  tomorrow() {\n    return dates.add(dates.startOf(new Date(), 'day'), 1, 'day')\n  }\n}\n\nexport default dates;\n"]},"metadata":{},"sourceType":"module"}