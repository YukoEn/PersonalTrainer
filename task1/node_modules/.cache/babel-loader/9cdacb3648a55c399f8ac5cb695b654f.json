{"ast":null,"code":"import dates from '../utils/dates';\nimport oldGlobalize from './oldGlobalize';\nimport warning from 'warning';\nimport { set } from '../formats';\nimport { set as setLocalizer } from '../localizer';\n\nvar dateRangeFormat = function dateRangeFormat(_ref, culture, local) {\n  var start = _ref.start,\n      end = _ref.end;\n  return local.format(start, {\n    date: 'short'\n  }, culture) + ' — ' + local.format(end, {\n    date: 'short'\n  }, culture);\n};\n\nvar timeRangeFormat = function timeRangeFormat(_ref2, culture, local) {\n  var start = _ref2.start,\n      end = _ref2.end;\n  return local.format(start, {\n    time: 'short'\n  }, culture) + ' — ' + local.format(end, {\n    time: 'short'\n  }, culture);\n};\n\nvar timeRangeStartFormat = function timeRangeStartFormat(_ref3, culture, local) {\n  var start = _ref3.start,\n      end = _ref3.end;\n  return local.format(start, {\n    time: 'short'\n  }, culture) + ' — ';\n};\n\nvar timeRangeEndFormat = function timeRangeEndFormat(_ref4, culture, local) {\n  var start = _ref4.start,\n      end = _ref4.end;\n  return ' — ' + local.format(end, {\n    time: 'short'\n  }, culture);\n};\n\nvar weekRangeFormat = function weekRangeFormat(_ref5, culture, local) {\n  var start = _ref5.start,\n      end = _ref5.end;\n  return local.format(start, 'MMM dd', culture) + ' — ' + local.format(end, dates.eq(start, end, 'month') ? 'dd' : 'MMM dd', culture);\n};\n\nexport var formats = {\n  dateFormat: 'dd',\n  dayFormat: 'eee dd/MM',\n  weekdayFormat: 'eee',\n  selectRangeFormat: timeRangeFormat,\n  eventTimeRangeFormat: timeRangeFormat,\n  eventTimeRangeStartFormat: timeRangeStartFormat,\n  eventTimeRangeEndFormat: timeRangeEndFormat,\n  timeGutterFormat: {\n    time: 'short'\n  },\n  monthHeaderFormat: 'MMMM yyyy',\n  dayHeaderFormat: 'eeee MMM dd',\n  dayRangeHeaderFormat: weekRangeFormat,\n  agendaHeaderFormat: dateRangeFormat,\n  agendaDateFormat: 'eee MMM dd',\n  agendaTimeFormat: {\n    time: 'short'\n  },\n  agendaTimeRangeFormat: timeRangeFormat\n};\nexport default function (globalize) {\n  var locale = function locale(culture) {\n    return culture ? globalize(culture) : globalize;\n  }; // return the first day of the week from the locale data. Defaults to 'world'\n  // territory if no territory is derivable from CLDR.\n  // Failing to use CLDR supplemental (not loaded?), revert to the original\n  // method of getting first day of week.\n\n\n  function firstOfWeek(culture) {\n    try {\n      var days = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n      var cldr = locale(culture).cldr;\n      var territory = cldr.attributes.territory;\n      var weekData = cldr.get('supplemental').weekData;\n      var firstDay = weekData.firstDay[territory || '001'];\n      return days.indexOf(firstDay);\n    } catch (e) {\n      warning(true, \"Failed to accurately determine first day of the week.\\n            Is supplemental data loaded into CLDR?\"); // maybe cldr supplemental is not loaded? revert to original method\n\n      var date = new Date(); //cldr-data doesn't seem to be zero based\n\n      var localeDay = Math.max(parseInt(locale(culture).formatDate(date, {\n        raw: 'e'\n      }), 10) - 1, 0);\n      return Math.abs(date.getDay() - localeDay);\n    }\n  }\n\n  if (!globalize.load) return oldGlobalize(globalize);\n  set(formats);\n  return setLocalizer({\n    firstOfWeek: firstOfWeek,\n    parse: function parse(value, format, culture) {\n      format = typeof format === 'string' ? {\n        raw: format\n      } : format;\n      return locale(culture).parseDate(value, format);\n    },\n    format: function format(value, _format, culture) {\n      _format = typeof _format === 'string' ? {\n        raw: _format\n      } : _format;\n      return locale(culture).formatDate(value, _format);\n    }\n  });\n}","map":{"version":3,"sources":["/Users/yukoenqvist/personaltrainer/src/localizers/globalize.js"],"names":["dates","oldGlobalize","warning","set","setLocalizer","dateRangeFormat","culture","local","start","end","format","date","timeRangeFormat","time","timeRangeStartFormat","timeRangeEndFormat","weekRangeFormat","eq","formats","dateFormat","dayFormat","weekdayFormat","selectRangeFormat","eventTimeRangeFormat","eventTimeRangeStartFormat","eventTimeRangeEndFormat","timeGutterFormat","monthHeaderFormat","dayHeaderFormat","dayRangeHeaderFormat","agendaHeaderFormat","agendaDateFormat","agendaTimeFormat","agendaTimeRangeFormat","globalize","locale","firstOfWeek","days","cldr","territory","attributes","weekData","get","firstDay","indexOf","e","Date","localeDay","Math","max","parseInt","formatDate","raw","abs","getDay","load","parse","value","parseDate"],"mappings":"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","sourcesContent":["import dates from '../utils/dates';\nimport oldGlobalize from './oldGlobalize';\nimport warning from 'warning';\nimport { set } from '../formats';\nimport { set as setLocalizer } from '../localizer';\n\nlet dateRangeFormat = ({ start, end }, culture, local) =>\n  local.format(start, { date: 'short' }, culture) + ' — ' + local.format(end, { date: 'short' }, culture)\n\nlet timeRangeFormat = ({ start, end }, culture, local) =>\n  local.format(start, { time: 'short' }, culture) +\n    ' — ' + local.format(end, { time: 'short' }, culture)\n\nlet timeRangeStartFormat = ({ start, end }, culture, local)=>\nlocal.format(start, { time: 'short' }, culture) + ' — '\n\nlet timeRangeEndFormat = ({ start, end }, culture, local)=>\n' — ' + local.format(end, { time: 'short' }, culture)\n\nlet weekRangeFormat = ({ start, end }, culture, local) =>\n  local.format(start, 'MMM dd', culture) +\n    ' — ' + local.format(end, dates.eq(start, end, 'month') ? 'dd' : 'MMM dd', culture)\n\nexport let formats = {\n  dateFormat: 'dd',\n  dayFormat: 'eee dd/MM',\n  weekdayFormat: 'eee',\n\n  selectRangeFormat: timeRangeFormat,\n  eventTimeRangeFormat: timeRangeFormat,\n  eventTimeRangeStartFormat: timeRangeStartFormat,\n  eventTimeRangeEndFormat: timeRangeEndFormat,\n\n  timeGutterFormat: { time: 'short' },\n\n  monthHeaderFormat: 'MMMM yyyy',\n  dayHeaderFormat: 'eeee MMM dd',\n  dayRangeHeaderFormat: weekRangeFormat,\n  agendaHeaderFormat: dateRangeFormat,\n\n  agendaDateFormat: 'eee MMM dd',\n  agendaTimeFormat: { time: 'short' },\n  agendaTimeRangeFormat: timeRangeFormat\n}\n\nexport default function(globalize) {\n  let locale = culture => culture ? globalize(culture) : globalize;\n\n  // return the first day of the week from the locale data. Defaults to 'world'\n  // territory if no territory is derivable from CLDR.\n  // Failing to use CLDR supplemental (not loaded?), revert to the original\n  // method of getting first day of week.\n  function firstOfWeek(culture) {\n    try {\n        const days = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n        const cldr = locale(culture).cldr;\n        const territory = cldr.attributes.territory;\n        const weekData = cldr.get('supplemental').weekData;\n        const firstDay = weekData.firstDay[territory || '001'];\n        return days.indexOf(firstDay);\n    } catch (e) {\n        warning(true,\n            `Failed to accurately determine first day of the week.\n            Is supplemental data loaded into CLDR?`);\n        // maybe cldr supplemental is not loaded? revert to original method\n        const date = new Date();\n        //cldr-data doesn't seem to be zero based\n        let localeDay = Math.max(\n          parseInt(locale(culture).formatDate(date, { raw: 'e' }), 10) - 1, 0)\n\n        return Math.abs(date.getDay() - localeDay)\n    }\n  }\n\n  if (!globalize.load)\n    return oldGlobalize(globalize);\n\n\n  set(formats)\n\n  return setLocalizer({\n    firstOfWeek,\n\n    parse(value, format, culture){\n      format = typeof format === 'string' ? { raw: format } : format;\n      return locale(culture).parseDate(value, format)\n    },\n\n    format(value, format, culture){\n      format = typeof format === 'string' ? { raw: format } : format;\n      return locale(culture).formatDate(value, format)\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}