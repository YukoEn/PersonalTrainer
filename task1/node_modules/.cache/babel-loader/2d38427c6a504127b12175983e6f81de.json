{"ast":null,"code":"import _objectSpread from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yukoenqvist/personaltrainer/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/yukoenqvist/personaltrainer/src/BackgroundCells.js\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport cn from 'classnames';\nimport dates from './utils/dates';\nimport { segStyle } from './utils/eventLevels';\nimport { notify } from './utils/helpers';\nimport { elementType } from './utils/propTypes';\nimport { dateCellSelection, slotWidth, getCellAtX, pointInBox } from './utils/selection';\nimport Selection, { getBoundsForNode, isEvent } from './Selection';\n\nvar BackgroundCells =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BackgroundCells, _React$Component);\n\n  function BackgroundCells(props, context) {\n    var _this;\n\n    _classCallCheck(this, BackgroundCells);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BackgroundCells).call(this, props, context));\n    _this.state = {\n      selecting: false\n    };\n    return _this;\n  }\n\n  _createClass(BackgroundCells, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.selectable && this._selectable();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._teardownSelectable();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.selectable && !this.props.selectable) this._selectable();\n      if (!nextProps.selectable && this.props.selectable) this._teardownSelectable();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          range = _this$props.range,\n          Wrapper = _this$props.cellWrapperComponent,\n          currentDate = _this$props.date;\n      var _this$state = this.state,\n          selecting = _this$state.selecting,\n          startIdx = _this$state.startIdx,\n          endIdx = _this$state.endIdx;\n      return React.createElement(\"div\", {\n        className: \"rbc-row-bg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, range.map(function (date, index) {\n        var selected = selecting && index >= startIdx && index <= endIdx;\n        return React.createElement(Wrapper, {\n          key: index,\n          value: date,\n          range: range,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          style: segStyle(1, range.length),\n          className: cn('rbc-day-bg', selected && 'rbc-selected-cell', dates.isToday(date) && 'rbc-today', currentDate && dates.month(currentDate) !== dates.month(date) && 'rbc-off-range-bg'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }));\n      }));\n    }\n  }, {\n    key: \"_selectable\",\n    value: function _selectable() {\n      var _this2 = this;\n\n      var node = findDOMNode(this);\n      var selector = this._selector = new Selection(this.props.container, {\n        longPressThreshold: this.props.longPressThreshold\n      });\n\n      var selectorClicksHandler = function selectorClicksHandler(point, actionType) {\n        if (!isEvent(findDOMNode(_this2), point)) {\n          var rowBox = getBoundsForNode(node);\n          var _this2$props = _this2.props,\n              range = _this2$props.range,\n              rtl = _this2$props.rtl;\n\n          if (pointInBox(rowBox, point)) {\n            var width = slotWidth(getBoundsForNode(node), range.length);\n            var currentCell = getCellAtX(rowBox, point.x, width, rtl, range.length);\n\n            _this2._selectSlot({\n              startIdx: currentCell,\n              endIdx: currentCell,\n              action: actionType\n            });\n          }\n        }\n\n        _this2._initial = {};\n\n        _this2.setState({\n          selecting: false\n        });\n      };\n\n      selector.on('selecting', function (box) {\n        var _this2$props2 = _this2.props,\n            range = _this2$props2.range,\n            rtl = _this2$props2.rtl;\n        var startIdx = -1;\n        var endIdx = -1;\n\n        if (!_this2.state.selecting) {\n          notify(_this2.props.onSelectStart, [box]);\n          _this2._initial = {\n            x: box.x,\n            y: box.y\n          };\n        }\n\n        if (selector.isSelected(node)) {\n          var nodeBox = getBoundsForNode(node);\n\n          var _dateCellSelection = dateCellSelection(_this2._initial, nodeBox, box, range.length, rtl);\n\n          startIdx = _dateCellSelection.startIdx;\n          endIdx = _dateCellSelection.endIdx;\n        }\n\n        _this2.setState({\n          selecting: true,\n          startIdx: startIdx,\n          endIdx: endIdx\n        });\n      });\n      selector.on('beforeSelect', function (box) {\n        if (_this2.props.selectable !== 'ignoreEvents') return;\n        return !isEvent(findDOMNode(_this2), box);\n      });\n      selector.on('click', function (point) {\n        return selectorClicksHandler(point, 'click');\n      });\n      selector.on('doubleClick', function (point) {\n        return selectorClicksHandler(point, 'doubleClick');\n      });\n      selector.on('select', function () {\n        _this2._selectSlot(_objectSpread({}, _this2.state, {\n          action: 'select'\n        }));\n\n        _this2._initial = {};\n\n        _this2.setState({\n          selecting: false\n        });\n\n        notify(_this2.props.onSelectEnd, [_this2.state]);\n      });\n    }\n  }, {\n    key: \"_teardownSelectable\",\n    value: function _teardownSelectable() {\n      if (!this._selector) return;\n\n      this._selector.teardown();\n\n      this._selector = null;\n    }\n  }, {\n    key: \"_selectSlot\",\n    value: function _selectSlot(_ref) {\n      var endIdx = _ref.endIdx,\n          startIdx = _ref.startIdx,\n          action = _ref.action;\n      if (endIdx !== -1 && startIdx !== -1) this.props.onSelectSlot && this.props.onSelectSlot({\n        start: startIdx,\n        end: endIdx,\n        action: action\n      });\n    }\n  }]);\n\n  return BackgroundCells;\n}(React.Component);\n\nBackgroundCells.propTypes = {\n  date: PropTypes.instanceOf(Date),\n  cellWrapperComponent: elementType,\n  container: PropTypes.func,\n  selectable: PropTypes.oneOf([true, false, 'ignoreEvents']),\n  longPressThreshold: PropTypes.number,\n  onSelectSlot: PropTypes.func.isRequired,\n  onSelectEnd: PropTypes.func,\n  onSelectStart: PropTypes.func,\n  range: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  rtl: PropTypes.bool,\n  type: PropTypes.string\n};\nexport default BackgroundCells;","map":{"version":3,"sources":["/Users/yukoenqvist/personaltrainer/src/BackgroundCells.js"],"names":["PropTypes","React","findDOMNode","cn","dates","segStyle","notify","elementType","dateCellSelection","slotWidth","getCellAtX","pointInBox","Selection","getBoundsForNode","isEvent","BackgroundCells","props","context","state","selecting","selectable","_selectable","_teardownSelectable","nextProps","range","Wrapper","cellWrapperComponent","currentDate","date","startIdx","endIdx","map","index","selected","length","isToday","month","node","selector","_selector","container","longPressThreshold","selectorClicksHandler","point","actionType","rowBox","rtl","width","currentCell","x","_selectSlot","action","_initial","setState","on","box","onSelectStart","y","isSelected","nodeBox","onSelectEnd","teardown","onSelectSlot","start","end","Component","propTypes","instanceOf","Date","func","oneOf","number","isRequired","arrayOf","bool","type","string"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport cn from 'classnames';\n\nimport dates from './utils/dates';\nimport { segStyle } from './utils/eventLevels';\nimport { notify } from './utils/helpers';\nimport { elementType } from './utils/propTypes';\nimport { dateCellSelection, slotWidth, getCellAtX, pointInBox } from './utils/selection';\nimport Selection, { getBoundsForNode, isEvent } from './Selection';\n\nclass BackgroundCells extends React.Component {\n\n  static propTypes = {\n    date: PropTypes.instanceOf(Date),\n    cellWrapperComponent: elementType,\n    container: PropTypes.func,\n    selectable: PropTypes.oneOf([true, false, 'ignoreEvents']),\n    longPressThreshold: PropTypes.number,\n\n    onSelectSlot: PropTypes.func.isRequired,\n    onSelectEnd: PropTypes.func,\n    onSelectStart: PropTypes.func,\n\n    range: PropTypes.arrayOf(\n      PropTypes.instanceOf(Date)\n    ),\n    rtl: PropTypes.bool,\n    type: PropTypes.string,\n  }\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      selecting: false\n    };\n  }\n\n  componentDidMount(){\n    this.props.selectable\n      && this._selectable()\n  }\n\n  componentWillUnmount() {\n    this._teardownSelectable();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.selectable && !this.props.selectable)\n      this._selectable();\n\n    if (!nextProps.selectable && this.props.selectable)\n      this._teardownSelectable();\n  }\n\n  render(){\n    let { range, cellWrapperComponent: Wrapper, date: currentDate } = this.props;\n    let { selecting, startIdx, endIdx } = this.state;\n\n    return (\n      <div className='rbc-row-bg'>\n        {range.map((date, index) => {\n          let selected =  selecting && index >= startIdx && index <= endIdx;\n          return (\n            <Wrapper\n              key={index}\n              value={date}\n              range={range}\n            >\n              <div\n                style={segStyle(1, range.length)}\n                className={cn(\n                  'rbc-day-bg',\n                  selected && 'rbc-selected-cell',\n                  dates.isToday(date) && 'rbc-today',\n                  currentDate && dates.month(currentDate) !== dates.month(date) && 'rbc-off-range-bg',\n                )}\n              />\n            </Wrapper>\n          )\n        })}\n      </div>\n    )\n  }\n\n  _selectable(){\n    let node = findDOMNode(this);\n    let selector = this._selector = new Selection(this.props.container, {\n      longPressThreshold: this.props.longPressThreshold,\n    })\n\n    let selectorClicksHandler = (point, actionType) => {\n      if (!isEvent(findDOMNode(this), point)) {\n        let rowBox = getBoundsForNode(node)\n        let { range, rtl } = this.props;\n\n        if (pointInBox(rowBox, point)) {\n          let width = slotWidth(getBoundsForNode(node),  range.length);\n          let currentCell = getCellAtX(rowBox, point.x, width, rtl, range.length);\n\n          this._selectSlot({\n            startIdx: currentCell,\n            endIdx: currentCell,\n            action: actionType,\n          })\n        }\n      }\n\n      this._initial = {}\n      this.setState({ selecting: false })\n    };\n\n    selector.on('selecting', box => {\n      let { range, rtl } = this.props;\n\n      let startIdx = -1;\n      let endIdx = -1;\n\n      if (!this.state.selecting) {\n        notify(this.props.onSelectStart, [box]);\n        this._initial = { x: box.x, y: box.y };\n      }\n      if (selector.isSelected(node)) {\n        let nodeBox = getBoundsForNode(node);\n\n        ({ startIdx, endIdx } = dateCellSelection(\n            this._initial\n          , nodeBox\n          , box\n          , range.length\n          , rtl));\n      }\n\n      this.setState({\n        selecting: true,\n        startIdx, endIdx\n      })\n    })\n\n    selector.on('beforeSelect', (box) => {\n      if (this.props.selectable !== 'ignoreEvents') return\n\n      return !isEvent(findDOMNode(this), box)\n    })\n\n    selector\n      .on('click', point => selectorClicksHandler(point, 'click'))\n\n    selector\n      .on('doubleClick', point => selectorClicksHandler(point, 'doubleClick'))\n\n    selector\n      .on('select', () => {\n        this._selectSlot({ ...this.state, action: 'select' })\n        this._initial = {}\n        this.setState({ selecting: false })\n        notify(this.props.onSelectEnd, [this.state]);\n      })\n  }\n\n  _teardownSelectable() {\n    if (!this._selector) return\n    this._selector.teardown();\n    this._selector = null;\n  }\n\n  _selectSlot({ endIdx, startIdx, action }) {\n    if (endIdx !== -1 && startIdx !== -1)\n      this.props.onSelectSlot &&\n        this.props.onSelectSlot({\n          start: startIdx,\n          end: endIdx,\n          action\n        })\n  }\n}\n\nexport default BackgroundCells;\n"]},"metadata":{},"sourceType":"module"}